/*
 *@title GofDesignYH / GofDesignYH_Analysis.txt
 */
 /*
 *@title CsharpBegin / GofDesignYH / GDYH01_Iterator / MainIteratorSample.cs 
 *@reference CS 山田祥寛『独習 C＃ [新版] 』 翔泳社, 2017 
 *@reference JG 結城 浩 『デザインパターン入門 Java言語 [増補改訂版]』SB Creative, 2004 
 *@content 第１章 Iterator / p2 / List 1-1 ～ 1-6
 *         || Design Pattern || 全体
 *         ・具体的なクラスだけでコーディングすると、クラス間の結合が強くなり再利用が難しくなる
 *           abstract(=抽象) - concreat(=具体) に分割することでクラス間の結合を緩和する。
 *           => 部品としてクラスの再利用性を上げる
 *           
 *         || Iterator || ～ひとつひとつ数え上げる～
 *         ・[Java] Iterator / [C#] Enumerator 言語仕様の標準ライブラリにも採用されたパターン
 *         ・|| Composite || 再帰的な構造を持つプログラムには適用しずらい
 *         ・Aggregate(集合体)と Iterator(数え上げ)のクラス群を分離
 *           => Bookの配列/List機能の変更が Iteratorクラス群には影響を与えない。
 *           => 互いに独立しているので、変更時には部分的な修正をすれば済む。
 *              (全体を修正する必要がない)
 *              
 *@author shika 
 *@date 2022-04-05 
*/
/*
*@title CsharpBegin / GofDesignYH / GY01_Iterator / EnumeratorSample / MainEnumeratorSample.cs 
*@content JG 第１章 Iterator / 練習問題 1-1 / p14, 382
 *         内部配列だと要素の追加ができないので、Listに修正する。
 *         || Iterator || は[Java][C#]の言語仕様でインターフェイス, クラスとして実装化している。
 *         
 *@subject [Java]〔JG1〕java.util.Iterator<T> <<interface>>
 *         Iterator<T> collection.iterator()
 *         boolean     iterator.hasNext()
 *         E           iterator.Next()
 *         void        iterator.remove()
 *         
 *@subject [C#]〔CS41,59〕System.Collections.Generics.IEnumerator<T> / IEnumerable<T>
 *         List<T>.Enumerator list.GetEnumerator()
 *         T          enumerator.Current
 *         bool       enumerator.MoveNext()
 *         void       enumerator.Dispose()
 *         
 *@subject [C#]〔CS84〕System.Linq
 *         IEnumerable<T> bs = <dataSource>.Select(b => b)
 *                             .Distinct();
 *         List<T> bs.ToList();
 *                             
 *@class MainEnumeratorSample
 *@class BookShelfCollection
 *       内部配列を Listに変更することで、追加を可能にする。
 *       LINQ Ditinct()を用いて重複要素を一本化。
 *       
 *@author shika 
 *@date 2022-04-06 
 */
 /** 
 *@title CsharpBegin / GofDesignYH / GY02_Adapter / AdapterInherit / MainAdapterInherit.cs 
 *@content JG 第２章 Adapter / サンプル１ / p16 / List 2-1 ～ 2-4
 *         || Adapter ||  ～ 一皮かぶせて再利用 ～
 *           ・既存のクラスを部品として再利用したいときに利用
 *             (変更時に既存のクラス Adapteeを修正する必要がない)
 *           ・バグが出ても既存のクラス Adapteeは正常に動いていたので、
 *             Adapter, Target側のみ検証すればいい。
 *           ・バージョンアップ時の新旧互換性を維持できる
 *             既存クラスは変更せずに新バージョンに適用させる部分を
 *             Adapterとして記述。
 *             (新旧バージョンのどちらでも正しく動作する)
 *           ・機能的に掛け離れている場合は利用できない。
 *         ＊Target 対象 = IPrintGY02, AbsPrintGY02
 *           利用したいメソッドを持つ既存のクラス
 *           
 *         ＊Client 依頼者 = Main
 *           Targetを用いて仕事をするクラス
 *           
 *         ＊Adaptee 適合される者 = BannerGY02
 *           ・既存のメソッドを持っているクラス
 *           ・Clientの利用する Targetが Adapteeのメソッドと一致していれば
 *             Adapterをする必要がない
 *             
 *         ＊Adapter 適合する者 = PrintBannerGy02, PrintBannerAggregate
 *           ・Adapteeのメソッドを Targetで利用できるように 
 *             継承/委譲させているクラス
 */
#region Class Chart 〔AdapterInherit〕
/*
 *@class MainAdapterInherit
 *         ↓ use    //PrintStrong(), PrintWeak()を利用したい
 *@class IPrintGY02 <<interface>> 
 *         △
 *         : 　implements 同一視
 *@class PrintBanner : BannerGY02, IPrintGY02
 *         |        //適合させるための Adapter
 *         ▽  extends 継承
 *@class BannerGY02 //元からあるクラス
 *@date 2022-04-08 
*/
/** 
 *@title CsharpBegin / GofDesignYH / GY02_Adapter / AdapterAggregate / MainAdapterAggregate.cs 
 *@content 第２章 Adapter / サンプル２ / p20 / 2-5, 2-6
 *         サンプル１: クラスによる Adapter      => inherit 継承
 *         サンプル２: インスタンスによる Adapter => aggregate 集約/委譲
 */
#region Class Chart 〔AdapterAggregate〕
/*
  *class MainAdapterAggregate
 *         ↓ use    //PrintStrong(), PrintWeak()を利用したい
 *@class AbsPrintGY02 
 *         △
 *         | 　implements 同一視
 *@class PrintBannerAggregate : AbsPrintGy02 //適合させるための Adapter  
 *         ◇  aggregate 集約/委譲
 *         ↓        
 *@class BannerGY02 //元からあるクラス
 */
#endregion
/* 
 *@author shika 
 *@date 2022-04-08 
*/