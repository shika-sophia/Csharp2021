/*
 *@title GofDesignYH / GofDesignYH_Analysis.txt
 */
 /*
 *@title CsharpBegin / GofDesignYH / GDYH01_Iterator / MainIteratorSample.cs 
 *@reference CS 山田祥寛『独習 C＃ [新版] 』 翔泳社, 2017 
 *@reference JG 結城 浩 『デザインパターン入門 Java言語 [増補改訂版]』SB Creative, 2004 
 *@content 第１章 Iterator / p2 / List 1-1 ～ 1-6
 *         || Design Pattern || 全体
 *         ・具体的なクラスだけでコーディングすると、クラス間の結合が強くなり再利用が難しくなる
 *           abstract(=抽象) - concreat(=具体) に分割することでクラス間の結合を緩和する。
 *           => 部品としてクラスの再利用性を上げる
 *           
 *         || Iterator || ～ひとつひとつ数え上げる～
 *         ・[Java] Iterator / [C#] Enumerator 言語仕様の標準ライブラリにも採用されたパターン
 *         ・|| Composite || 再帰的な構造を持つプログラムには適用しずらい
 *         ・Aggregate(集合体)と Iterator(数え上げ)のクラス群を分離
 *           => Bookの配列/List機能の変更が Iteratorクラス群には影響を与えない。
 *           => 互いに独立しているので、変更時には部分的な修正をすれば済む。
 *              (全体を修正する必要がない)
 *              
 *@author shika 
 *@date 2022-04-05 
*/
/*
*@title CsharpBegin / GofDesignYH / GY01_Iterator / EnumeratorSample / MainEnumeratorSample.cs 
*@content JG 第１章 Iterator / 練習問題 1-1 / p14, 382
 *         内部配列だと要素の追加ができないので、Listに修正する。
 *         || Iterator || は[Java][C#]の言語仕様でインターフェイス, クラスとして実装化している。
 *         
 *@subject [Java]〔JG1〕java.util.Iterator<T> <<interface>>
 *         Iterator<T> collection.iterator()
 *         boolean     iterator.hasNext()
 *         E           iterator.Next()
 *         void        iterator.remove()
 *         
 *@subject [C#]〔CS41,59〕System.Collections.Generics.IEnumerator<T> / IEnumerable<T>
 *         List<T>.Enumerator list.GetEnumerator()
 *         T          enumerator.Current
 *         bool       enumerator.MoveNext()
 *         void       enumerator.Dispose()
 *         
 *@subject [C#]〔CS84〕System.Linq
 *         IEnumerable<T> bs = <dataSource>.Select(b => b)
 *                             .Distinct();
 *         List<T> bs.ToList();
 *                             
 *@class MainEnumeratorSample
 *@class BookShelfCollection
 *       内部配列を Listに変更することで、追加を可能にする。
 *       LINQ Ditinct()を用いて重複要素を一本化。
 *       
 *@author shika 
 *@date 2022-04-06 
 */